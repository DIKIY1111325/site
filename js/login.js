// –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
import authManager from './auth.js';
import { supabaseClient } from './supabase.js';

// –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
const showMessage = (message, isError = false) => {
    const messageElement = document.getElementById('login-message');
    messageElement.textContent = message;
    messageElement.style.color = isError ? 'red' : 'green';
    messageElement.style.display = 'block';
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
const supabaseUrl = 'https://aws-0-ap-south-1.pooler.supabase.com:5432';  // –•–æ—Å—Ç –∏ –ø–æ—Ä—Ç
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRzdmFxcGh1YWdybmtqbXRodGV0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDExNjUwMTQsImV4cCI6MjA1Njc0MTAxNH0.7p5J2VlCie9lWoUrm1YkMdSeEkRadB4b7vROMlPexsY';
const supabase = supabase.createClient(supabaseUrl, supabaseKey);

const clearMessage = () => {
    const messageElement = document.getElementById('login-message');
    messageElement.style.display = 'none';
    messageElement.textContent = '';
};

const { createClient } = supabase;

const supabaseUrl = 'https://dsvaqphuagrnkjmthtet.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRzdmFxcGh1YWdybmtqbXRodGV0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDExNjUwMTQsImV4cCI6MjA1Njc0MTAxNH0.7p5J2VlCie9lWoUrm1YkMdSeEkRadB4b7vROMlPexsY';

const supabaseClient = createClient(supabaseUrl, supabaseKey);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
(async () => {
    const { data, error } = await supabaseClient
        .from('users')
        .select('*');

    if (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
    } else {
        console.log('–î–∞–Ω–Ω—ã–µ:', data);
    }
})();


// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
(async () => {
    const { data, error } = await supabaseClient
        .from('users')
        .select('*');

    if (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
    } else {
        console.log('–î–∞–Ω–Ω—ã–µ:', data);
    }
})();


const toggleLoadingState = (isLoading) => {
    const elements = ['login-submit', 'login-email', 'login-password'];
    elements.forEach(id => {
        const element = document.getElementById(id);
        if (element) {
            element.disabled = isLoading;
            if (id === 'login-submit') {
                element.innerHTML = isLoading ? '<span class="spinner"></span> –í—Ö–æ–¥...' : '–í–æ–π—Ç–∏';
            }
        }
    });
};

const handleNetworkError = (error) => {
    console.error('Network error:', error);
    showMessage('–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.', true);
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
const saveLastUsedEmail = (email, remember) => {
    if (remember) {
        localStorage.setItem('lastUsedEmail', email);
    } else {
        localStorage.removeItem('lastUsedEmail');
    }
};

const restoreLastUsedEmail = (emailInput) => {
    const savedEmail = localStorage.getItem('lastUsedEmail');
    if (savedEmail && emailInput) {
        emailInput.value = savedEmail;
        const rememberCheckbox = document.getElementById('remember-me');
        if (rememberCheckbox) {
            rememberCheckbox.checked = true;
        }
    }
};

// –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
const validateEmail = (email) => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!email) {
        return { isValid: false, message: 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' };
    }
    if (!emailRegex.test(email)) {
        return { isValid: false, message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email' };
    }
    return { isValid: true };
};

const validatePassword = (password) => {
    if (!password) {
        return { isValid: false, message: '–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' };
    }
    if (password.length < 8) {
        return { isValid: false, message: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤' };
    }
    return { isValid: true };
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
const setupInactivityTimer = () => {
    let inactivityTimeout;

    const resetTimer = () => {
        if (inactivityTimeout) {
            clearTimeout(inactivityTimeout);
        }
        inactivityTimeout = setTimeout(() => {
            if (authManager.isAuthenticated()) {
                authManager.logout();
                showMessage('–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', true);
            }
        }, 30 * 60 * 1000); // 30 –º–∏–Ω—É—Ç
    };

    ['mousedown', 'keydown', 'scroll', 'touchstart'].forEach(event => {
        document.addEventListener(event, resetTimer);
    });

    resetTimer();
    return () => {
        if (inactivityTimeout) {
            clearTimeout(inactivityTimeout);
        }
    };
};
// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º—ã
    const loginForm = document.getElementById('login-form');
    const emailInput = document.getElementById('login-email');
    const passwordInput = document.getElementById('login-password');
    const rememberMeCheckbox = document.getElementById('remember-me');

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è
    const setupPasswordToggle = () => {
        const passwordToggle = document.getElementById('toggle-password');
        if (passwordToggle && passwordInput) {
            passwordToggle.addEventListener('click', () => {
                const type = passwordInput.type === 'password' ? 'text' : 'password';
                passwordInput.type = type;
                passwordToggle.textContent = type === 'password' ? 'üëÅÔ∏è' : 'üëÅÔ∏è‚Äçüó®Ô∏è';
            });
        }
    };

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    const setupRealTimeValidation = () => {
        emailInput?.addEventListener('input', () => {
            const email = emailInput.value.trim();
            const { isValid } = validateEmail(email);
            emailInput.style.borderColor = email ? (isValid ? 'green' : 'red') : '#ccc';
        });

        passwordInput?.addEventListener('input', () => {
            const password = passwordInput.value;
            const { isValid } = validatePassword(password);
            passwordInput.style.borderColor = password ? (isValid ? 'green' : 'red') : '#ccc';
        });
    };

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    const updateSecurityMetrics = async (email, success) => {
        try {
            const metrics = JSON.parse(localStorage.getItem('security_metrics') || '{}');
            const today = new Date().toISOString().split('T')[0];
            
            if (!metrics[today]) {
                metrics[today] = { attempts: 0, successes: 0, failures: 0 };
            }

            metrics[today].attempts++;
            metrics[today][success ? 'successes' : 'failures']++;

            localStorage.setItem('security_metrics', JSON.stringify(metrics));
        } catch (error) {
            console.error('Error updating security metrics:', error);
        }
    };

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const checkUserSubscription = async (userId) => {
        try {
            const { data: subscription, error } = await supabaseClient
                .from('subscriptions')
                .select('status, plan')
                .eq('user_id', userId)
                .single();

            if (error) throw error;
            return subscription;
        } catch (error) {
            console.error('Error checking subscription:', error);
            return null;
        }
    };

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const getRedirectPage = (subscription) => {
        if (document.referrer.includes('invite.html')) {
            return 'vpn_client.html';
        }
        
        if (subscription?.status === 'active') {
            return 'dashboard.html';
        }
        
        return 'subscription.html';
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const initializePage = () => {
        setupPasswordToggle();
        setupRealTimeValidation();
        restoreLastUsedEmail(emailInput);
        const cleanup = setupInactivityTimer();

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        if (authManager.isAuthenticated()) {
            window.location.href = 'dashboard.html';
            return;
        }

        return cleanup;
    };
	    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    loginForm?.addEventListener('submit', async (e) => {
        e.preventDefault();
        clearMessage();

        const email = emailInput?.value.trim();
        const password = passwordInput?.value;
        const remember = rememberMeCheckbox?.checked || false;

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
        const emailValidation = validateEmail(email);
        const passwordValidation = validatePassword(password);

        if (!emailValidation.isValid) {
            showMessage(emailValidation.message, true);
            return;
        }

        if (!passwordValidation.isValid) {
            showMessage(passwordValidation.message, true);
            return;
        }

        try {
            toggleLoadingState(true);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞
            const canAttempt = await authManager.canAttemptLogin(email);
            if (!canAttempt) {
                throw new Error('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            }

            // –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞
            const { data, error } = await supabaseClient.auth.signInWithPassword({
                email,
                password
            });

            if (error) {
                await authManager.handleFailedLogin(email);
                throw error;
            }

            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ email –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–∑–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è"
            saveLastUsedEmail(email, remember);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
            const subscription = await checkUserSubscription(data.user.id);
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            await updateSecurityMetrics(email, true);
            
            // –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ
            showMessage('–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!');

            // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            const redirectPage = getRedirectPage(subscription);
            setTimeout(() => {
                window.location.href = redirectPage;
            }, 1500);

        } catch (error) {
            await updateSecurityMetrics(email, false);
            
            if (!navigator.onLine || error.name === 'NetworkError') {
                handleNetworkError(error);
            } else {
                showMessage(error.message, true);
            }
        } finally {
            toggleLoadingState(false);
        }
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ URL –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
    const checkUrlMessages = () => {
        const urlParams = new URLSearchParams(window.location.search);
        const message = urlParams.get('message');
        if (message) {
            showMessage(
                decodeURIComponent(message),
                urlParams.get('error') === 'true'
            );
        }
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—á–∏—Å—Ç–∫–∏
    const cleanup = initializePage();
    checkUrlMessages();

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    window.addEventListener('beforeunload', () => {
        cleanup?.();
    });
});

// –≠–∫—Å–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export {
    validateEmail,
    validatePassword,
    showMessage,
    clearMessage
};
